commit 394251ade9b319a965cbb89f894c222782c87efa
Author: Suchakra Sharma <suchakrapani.sharma@polymtl.ca>
Date:   Thu Nov 17 19:15:29 2016 -0500

    FlowJIT v1
    
     - Arm/disarm tracking and flowjit event generation
     - Add ioctls and debugfs entry
     - Add Kconfig option for tracing executable pages
    
    Signed-off-by: Suchakra Sharma <suchakrapani.sharma@polymtl.ca>

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 7d1fa7c..fb1f35a 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -27,6 +27,8 @@
 #define CREATE_TRACE_POINTS
 #include <asm/trace/exceptions.h>
 
+#include <linux/flowjit.h>
+
 /*
  * Page fault error code bits:
  *
@@ -1343,6 +1345,13 @@ retry:
 	 */
 good_area:
 	if (unlikely(access_error(error_code, vma))) {
+		/* Did we track this process? Let's restore EXEC bits then */
+		if (flowjit_enabled())
+		{
+			flowjit_disarm(vma);
+			flowjit_build_event(vma);
+			goto go_ahead;
+		}
 		bad_area_access_error(regs, error_code, address, vma);
 		return;
 	}
@@ -1353,6 +1362,7 @@ good_area:
 	 * the fault.  Since we never set FAULT_FLAG_RETRY_NOWAIT, if
 	 * we get VM_FAULT_RETRY back, the mmap_sem has been unlocked.
 	 */
+go_ahead:
 	fault = handle_mm_fault(mm, vma, address, flags);
 	major |= fault & VM_FAULT_MAJOR;
 
diff --git a/include/linux/flowjit.h b/include/linux/flowjit.h
new file mode 100644
index 0000000..6a5ca71
--- /dev/null
+++ b/include/linux/flowjit.h
@@ -0,0 +1,37 @@
+/*
+ * Executable page tracing.
+ *
+ * Copyright (C) 2016 Suchakra Sharma
+ */
+
+#ifndef _LINUX_FLOWJIT_H_
+#define _LINUX_FLOWJIT_H_
+
+#include <linux/sched.h>
+#include <linux/types.h>
+#include <linux/list.h>
+
+#define FLOWJIT_DEBUGFS "flowjit"
+
+#define FLOWJIT_ENABLE		_IO(0xF6, 0x92)
+#define FLOWJIT_DISABLE		_IO(0xF6, 0x93)
+#define FLOWJIT_STATUS		_IO(0xF6, 0x94)
+
+// FIXME: support other page size
+struct flowjit_event {
+	u32 id;
+	u64 ip;
+	ktime_t ts;
+	char buf[PAGE_SIZE];
+	struct list_head list;
+};
+
+int flowjit_enabled(void);
+unsigned long flowjit_arm(unsigned long);
+void flowjit_disarm(struct vm_area_struct*);
+void flowjit_set_enable(bool);
+void flowjit_build_event(struct vm_area_struct*);
+void flowjit_free(void);
+
+
+#endif /* _LINUX_FLOWJIT_H_ */
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index ca3e517..b1f63ed 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -357,6 +357,11 @@ struct vm_area_struct {
 	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
 #endif
 	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
+
+#ifdef CONFIG_TRACING_EXEC_PAGE
+	unsigned int flowjit_state;
+	// save protection flags?
+#endif
 };
 
 struct core_thread {
@@ -370,6 +375,24 @@ struct core_state {
 	struct completion startup;
 };
 
+/*
+ * A page is in state PROT_READ | PROT_WRITE -> FLOWJIT_NONEs
+ * mprotect(PROT_EXEC) -> FLOWJIT_PENDING
+ * PF_INSTR
+ */
+
+/*
+ * VMA state for intercepting changes to executable pages.
+ *  - FLOWJIT_NONE: this VMA is not tracked
+ *  - FLOWJIT_WRITE: flags (PROT_WRITE | PROT_EXEC) are actually set, but PROT_EXEC is disabled
+ *  If the page is executed
+ */
+enum {
+	FLOWJIT_NONE,
+	FLOWJIT_WRITE,
+	FLOWJIT_EXEC,
+};
+
 enum {
 	MM_FILEPAGES,	/* Resident file mapping pages */
 	MM_ANONPAGES,	/* Resident anonymous pages */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 253538f..ff4c08a 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1918,6 +1918,12 @@ struct task_struct {
 #ifdef CONFIG_MMU
 	struct task_struct *oom_reaper_list;
 #endif
+#ifdef CONFIG_TRACING_EXEC_PAGE
+	unsigned int flowjit_trace;
+#endif
+
+
+
 /* CPU-specific state of this task */
 	struct thread_struct thread;
 /*
diff --git a/kernel/trace/Kconfig b/kernel/trace/Kconfig
index fafeaf8..a8b2273 100644
--- a/kernel/trace/Kconfig
+++ b/kernel/trace/Kconfig
@@ -670,5 +670,12 @@ config TRACING_EVENTS_GPIO
 
 endif # FTRACE
 
+config TRACING_EXEC_PAGE
+	bool "Trace executable page modifications"
+	default y
+	help
+		Enable tracing executable pages. This feature is useful for offline
+		decoding hardware traces for JIT and self-modifying code.
+
 endif # TRACING_SUPPORT
 
diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index 979e7bf..f5befa3 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -68,5 +68,6 @@ obj-$(CONFIG_PROBE_EVENTS) += trace_probe.o
 obj-$(CONFIG_UPROBE_EVENT) += trace_uprobe.o
 
 obj-$(CONFIG_TRACEPOINT_BENCHMARK) += trace_benchmark.o
+obj-$(CONFIG_TRACING_EXEC_PAGE) += trace_flowjit.o
 
 libftrace-y := ftrace.o
diff --git a/kernel/trace/trace_flowjit.c b/kernel/trace/trace_flowjit.c
new file mode 100644
index 0000000..8fb6f8b
--- /dev/null
+++ b/kernel/trace/trace_flowjit.c
@@ -0,0 +1,155 @@
+/*
+ * Executable page tracing.
+ *
+ * Copyright (C) 2016 Suchakra Sharma
+ */
+
+#include <linux/module.h>
+#include <linux/flowjit.h>
+#include <linux/sched.h>
+
+#include <linux/init.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <linux/mm.h>
+#include <linux/uaccess.h>
+
+#ifdef CONFIG_TRACING_EXEC_PAGE
+
+struct flowjit_event fevent;
+
+int flowjit_enabled(void)
+{
+	return current->flowjit_trace;
+}
+
+void flowjit_set_enable(bool state)
+{
+	current->flowjit_trace = state;
+}
+
+unsigned long flowjit_arm(unsigned long flags)
+{
+	return flags &= ~(VM_EXEC);
+}
+
+void flowjit_disarm(struct vm_area_struct *vma)
+{
+	int dirty_acc = 0;
+	unsigned long nflags = (vma->vm_flags | 0x000004);
+	vma->vm_flags = nflags;
+	dirty_acc = vma_wants_writenotify(vma);
+	vma_set_page_prot(vma);
+	change_protection(vma, vma->vm_start, vma->vm_end, vma->vm_page_prot, dirty_acc, 0);
+}
+
+void flowjit_build_event(struct vm_area_struct *vma)
+{
+	struct flowjit_event *ev;
+	ev = (struct flowjit_event*) kmalloc(sizeof(*ev), GFP_KERNEL);
+	ev->ts = ktime_get();
+	ev->ip = vma->vm_start;
+	copy_from_user(ev->buf, (void __user *) vma->vm_start, PAGE_SIZE);
+	INIT_LIST_HEAD(&ev->list);
+	list_add_tail(&(ev->list), &(fevent.list));
+}
+
+void flowjit_free(void)
+{
+	struct flowjit_event *ev, *tmp;
+	list_for_each_entry_safe(ev, tmp, &fevent.list, list) {
+		list_del(&ev->list);
+		kfree(ev);
+	}
+}
+
+//FIXME We have to enable it when we write a proper test case instead of using cat
+static int flowjit_close(struct inode *inode, struct file *file)
+{
+	//flowjit_free();
+	return 0;
+}
+
+static int flowjit_open(struct inode *inode, struct file *file)
+{
+	file->private_data = inode->i_private;
+	return 0;
+}
+
+// FIXME For now, we just print latest entry. Make it more elegant later
+static ssize_t flowjit_read(struct file *filp, char __user * buffer,
+		size_t count, loff_t * ppos)
+{
+	struct flowjit_event *ev;
+
+	ev = list_last_entry(&fevent.list, struct flowjit_event, list);
+
+	if (*ppos >= sizeof(struct flowjit_event))
+		return 0;
+	if (*ppos + count > sizeof(struct flowjit_event))
+		count = sizeof(struct flowjit_event) - *ppos;
+
+	if (copy_to_user(buffer, ev + *ppos, count))
+		return -EFAULT;
+
+	*ppos += count;
+
+	return count;
+}
+
+
+static
+long flowjit_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	switch(cmd) {
+	case FLOWJIT_ENABLE:
+		flowjit_set_enable(true);
+		break;
+	case FLOWJIT_DISABLE:
+		flowjit_set_enable(false);
+		break;
+	case FLOWJIT_STATUS:
+		return flowjit_enabled();
+	default:
+		return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+
+static struct file_operations flowjit_fops = {
+		.owner = THIS_MODULE,
+		.unlocked_ioctl = flowjit_ioctl,
+#ifdef CONFIG_COMPAT
+		.compat_ioctl = flowjit_ioctl,
+#endif
+		.open = flowjit_open,
+		.read = flowjit_read,
+//		.release = flowjit_close,
+};
+
+static int __init flowjit_init(void)
+{
+	struct dentry *dentry;
+	dentry = debugfs_create_file(FLOWJIT_DEBUGFS, S_IRUGO, NULL, NULL, &flowjit_fops);
+	if (!dentry)
+		pr_warning("Failed to create flowjit debugfs file\n");
+
+	INIT_LIST_HEAD(&fevent.list);
+
+
+	return 0;
+}
+late_initcall(flowjit_init);
+
+static void __exit flowjit_exit(void)
+{
+	flowjit_free();
+	return;
+}
+
+#else
+
+int flowjit_enabled() { return false; }
+
+#endif /* CONFIG_TRACING_EXEC_PAGE */
diff --git a/mm/mprotect.c b/mm/mprotect.c
index 5019a1e..4c6d6ed 100644
--- a/mm/mprotect.c
+++ b/mm/mprotect.c
@@ -31,6 +31,8 @@
 #include <asm/tlbflush.h>
 
 #include "internal.h"
+#include <linux/flowjit.h>
+
 
 /*
  * For a prot_numa update we only hold mmap_sem for read so there is a
@@ -433,6 +435,15 @@ SYSCALL_DEFINE3(mprotect, unsigned long, start, size_t, len,
 		tmp = vma->vm_end;
 		if (tmp > end)
 			tmp = end;
+
+		/* Are we tracking this process' executable pages?
+		 * Yes? So, lets flip the EXEC bits for VMA */
+		if (flowjit_enabled())
+		{
+			//printk("Flowjit was enabled for me! %s\n", current->comm);
+			newflags = flowjit_arm(newflags);
+		}
+
 		error = mprotect_fixup(vma, &prev, nstart, tmp, newflags);
 		if (error)
 			goto out;
